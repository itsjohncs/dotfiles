#!/usr/bin/env python3

## Generate a random string.

import argparse
import random
import string
import sys


CHARACTER_CLASSES = {
    "digits": string.digits,
    "letters": string.ascii_letters,
    "punctuation": string.punctuation,
    "space": " ",
}


def natural_number(value):
    number = int(value)
    if number < 1:
        raise ValueError()

    return number


def character_classes(value):
    result = set()
    for i in value.split(","):
        i = i.strip()
        if i not in CHARACTER_CLASSES:
            raise ValueError()
        result.add(i)

    return result


def parse_args(args):
    parser = argparse.ArgumentParser(
        description="Generates a random string.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "--exclude",
        type=character_classes,
        default=set(),
        help=(
            "Comma separated list of character classes to exclude. Must be "
            f"of {', '.join(CHARACTER_CLASSES.keys())}"
        ),
    )
    parser.add_argument(
        "-i",
        "--identifier",
        action="store_const",
        dest="preset",
        const="identifier",
        help="Creates a string matching [A-Za-z][A-Za-z0-9_]*.",
    )
    parser.add_argument(
        "-n",
        "--filename",
        "--file-name",
        action="store_const",
        dest="preset",
        const="filename",
        help="Creates a string matching [A-Za-z0-9-]*.",
    )

    parser.add_argument(
        "length",
        metavar="LENGTH",
        type=natural_number,
        default=20,
        help="Length of generated string.",
        nargs="?",
    )

    parsed_args = parser.parse_args(args)
    if parsed_args.preset and parsed_args.exclude:
        parser.error("--exclude cannot be used with a preset")

    return parsed_args


def random_string(length, *charset_names, extra=""):
    characters = set(extra)
    for i in charset_names:
        characters.update(CHARACTER_CLASSES[i])
    charset = "".join(characters)

    return "".join(random.choice(charset) for _ in range(length))


def generate_string(parsed_args):
    length = parsed_args.length
    match parsed_args.preset:
        case "identifier":
            return random_string(1, "letters") + random_string(
                length - 1, "letters", "digits", extra="_"
            )

        case "filename":
            return random_string(length, "letters", "digits", extra="-")

        case None:
            return random_string(
                length,
                *(i for i in CHARACTER_CLASSES if i not in parsed_args.exclude),
            )


def main(parsed_args):
    print(generate_string(parsed_args))


if __name__ == "__main__":
    main(parse_args(sys.argv[1:]))
