#!/usr/bin/env python3

## Find executable in path (following symlinks).

import argparse
import os
import sys
import re
import shlex


def decorated_path(path):
    flags = []
    if not os.access(path, os.X_OK):
        flags.append("not executable")

    if flags:
        return f"{path} {', '.join(flags)}"
    else:
        return path


def follow_symlinks(path):
    while os.path.islink(path):
        link = os.readlink(path)
        if not os.path.isabs(link):
            path = os.path.join(os.path.dirname(path), link)
        else:
            path = link
        print(f"-> {decorated_path(path)}")


def parse_alias(alias: str) -> str | None:
    match = re.match(r"alias\s+\w+='(.+)'", alias)
    if match:
        command = match.group(1).strip()
        parts = shlex.split(command)
        # Skip environment variables and find the first command
        for part in parts:
            if "=" not in part:
                return part
    return None


def get_command(query: str) -> str:
    if query.startswith("alias") and any(
        char in query for char in ["&&", ";", "|", "if", "(", ")"]
    ):
        raise ValueError("Complex aliases are not supported")

    parsed = parse_alias(query)
    if parsed:
        return parsed

    return query


def main():
    parser = argparse.ArgumentParser(description="Find executables in PATH")
    parser.add_argument(
        "-a", action="store_true", help="Show all matching executables in PATH"
    )
    parser.add_argument(
        "-n", "--no-symlinks", action="store_true", help="Disable symlink following"
    )
    parser.add_argument(
        "command",
        type=get_command,
        help="Command to search for. Also accepts aliases syntax from `command -v`.",
    )
    args = parser.parse_args()
    path_dirs = os.environ.get("PATH", "").split(os.pathsep)
    found = False

    for directory in path_dirs:
        command_path = os.path.join(directory, args.command)
        if os.path.isfile(command_path) and os.access(command_path, os.X_OK):
            found = True
            print(decorated_path(command_path))
            if not args.no_symlinks:
                follow_symlinks(command_path)
            if not args.a:
                break

    if not found:
        print(f"{args.command} not found in PATH")
        sys.exit(1)


if __name__ == "__main__":
    main()
